version: "3.8"

# Common Environment Variables (Shared Configuration Block)
# Used by many services to set PUID, PGID, and Timezone
x-common-env: &common-env
  PUID: "1000"
  PGID: "1000"
  TZ: "Asia/Ho_Chi_Minh"

# Define the network for all services
networks:
  default:
    # Set to true if the network is created outside of this compose file (e.g., using 'docker network create')
    external: true
    name: docker_homelab

services:

  # -----------------------------------------------------------
  # 1. HOMELAB DASHBOARD
  # -----------------------------------------------------------
  homepage:
    image: ghcr.io/gethomepage/homepage:latest
    container_name: homepage
    environment:
      # Inherit common environment variables
      <<: *common-env
      # Specific environment variable for Homepage
      HOMEPAGE_ALLOWED_HOSTS: homelab.lan:8080
    volumes:
      # Configuration files
      - /mnt/docker/config/homepage/config:/app/config
      # Mount main data storage for service status/monitoring
      - /mnt/data/:/mnt/storage
      # Required to monitor and manage other Docker containers (Read-only access to Docker daemon)
      - /var/run/docker.sock:/var/run/docker.sock:ro
    ports:
      # Host Port 8080 -> Container Port 3000 (Homepage UI)
      - "8080:3000"
    restart: unless-stopped

  # -----------------------------------------------------------
  # 2. UTILITY & FILE MANAGEMENT
  # -----------------------------------------------------------
  omni-tools:
    image: iib0011/omni-tools:latest
    container_name: omni-tools
    # No common-env used here in original file, but can be added if needed
    ports:
      # Host Port 8086 -> Container Port 80 (Web UI)
      - "8086:80"
    restart: unless-stopped

  filebrowser:
    image: filebrowser/filebrowser:s6
    container_name: filebrowser
    # Inherit common environment variables (PUID, PGID, TZ)
    environment: *common-env
    volumes:
      # Map main storage to /srv for browsing
      - /mnt/data:/srv
      # Database storage
      - /mnt/mmc1-4/filebrowser/database:/database
      # Configuration files
      - /mnt/mmc1-4/filebrowser/config:/config
    ports:
      # Host Port 8088 -> Container Port 80 (Web UI)
      - "8088:80"
    restart: unless-stopped

  syncthing:
    image: lscr.io/linuxserver/syncthing:latest
    container_name: syncthing
    environment: *common-env
    volumes:
      # Configuration files
      - /mnt/mmc1-4/syncthing/config:/config
      # Main data to be synced (syncthing's shared folder)
      - /mnt/data/haiphan:/data1
    ports:
      # Web UI Port
      - "8384:8384"
      # TCP/UDP Ports for data transfer
      - "22000:22000/tcp"
      - "22000:22000/udp"
      # UDP Port for discovery
      - "21027:21027/udp"
    restart: unless-stopped

  # -----------------------------------------------------------
  # 3. CONTAINER MAINTENANCE
  # -----------------------------------------------------------
  watchtower:
    image: containrrr/watchtower:latest
    container_name: watchtower
    environment:
      # Schedule: Run at 04:00 AM every day (Cron syntax)
      WATCHTOWER_SCHEDULE: "0 0 4 * * *"
      # Remove old images after update
      WATCHTOWER_CLEANUP: "true"
      # Separate TZ for watchtower if needed, but matches common-env
      TZ: "Asia/Ho_Chi_Minh"
    volumes:
      # Required to interact with Docker daemon for pulling/starting/stopping containers
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped

  # -----------------------------------------------------------
  # 4. MEDIA SERVER & STREAMING
  # -----------------------------------------------------------
  jellyfin:
    image: lscr.io/linuxserver/jellyfin:latest
    container_name: jellyfin
    environment: *common-env
    volumes:
      # Configuration files
      - /mnt/docker/config/jellyfin/config:/config
      # Media library mappings
      - /mnt/data/media/tvshow:/data/tvshows
      - /mnt/data/media/movies:/data/movies
      # Add device passthrough here if using hardware transcoding (e.g., /dev/dri)
    ports:
      # Web UI Port
      - "8096:8096"
      # UDP Port for discovery
      - "7359:7359/udp"
    restart: unless-stopped

  navidrome:
    image: deluan/navidrome:latest
    container_name: navidrome
    environment:
      # Scan the music library every 1 hour
      ND_SCANSCHEDULE: 1h
      ND_LOGLEVEL: info
    volumes:
      # Configuration and database
      - /mnt/docker/config/navidrome:/data
      # Music library (Read-Only access is recommended for media files)
      - /mnt/data/media/music:/music:ro
    ports:
      # Web UI Port
      - "4533:4533"
    restart: unless-stopped

  metube:
    image: ghcr.io/alexta69/metube
    container_name: metube
    volumes:
      # Downloads destination folder
      - /mnt/data/download:/downloads
    ports:
      # Web UI Port
      - "8081:8081"
    restart: unless-stopped

  # -----------------------------------------------------------
  # 5. AUTOMATED MEDIA MANAGEMENT (The 'Arr' Stack)
  # -----------------------------------------------------------
  qbittorrent:
    image: linuxserver/qbittorrent:latest
    container_name: qbittorrent
    environment:
      <<: *common-env
      # Custom WebUI port for qBittorrent
      WEBUI_PORT: "8083"
    volumes:
      # Configuration files
      - /mnt/docker/config/qbit:/config
      # Downloads folder (Shared with Radarr/Sonarr for 'hardlink' or 'move' operations)
      - /mnt/data/download:/downloads
    ports:
      # Web UI Port
      - "8083:8083"
      # Torrent Communication Ports (TCP/UDP)
      - "6881:6881"
      - "6881:6881/udp"
    restart: unless-stopped

  prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: prowlarr
    environment: *common-env
    volumes:
      # Configuration files
      - /mnt/docker/config/prowlarr:/config
    ports:
      # Web UI Port
      - "9696:9696"
    restart: unless-stopped

  radarr:
    image: lscr.io/linuxserver/radarr:latest
    container_name: radarr
    environment: *common-env
    volumes:
      # Configuration files
      - /mnt/docker/config/radarr:/config
      # Download folder (must match qbittorrent's /downloads)
      - /mnt/data/download:/downloads
      # Final destination for movies
      - /mnt/data/media/movies:/movies
    ports:
      # Web UI Port
      - "7878:7878"
    # Wait for dependencies to be ready before starting
    depends_on: [qbittorrent, prowlarr]
    restart: unless-stopped

  sonarr:
    image: lscr.io/linuxserver/sonarr:latest
    container_name: sonarr
    environment: *common-env
    volumes:
      # Configuration files
      - /mnt/docker/config/sonarr:/config
      # Download folder (must match qbittorrent's /downloads)
      - /mnt/data/download:/downloads
      # Final destination for TV shows
      - /mnt/data/media/tvshow:/tv
    ports:
      # Web UI Port
      - "8989:8989"
    # Wait for dependencies to be ready before starting
    depends_on: [qbittorrent, prowlarr]
    restart: unless-stopped

  bazarr:
    image: lscr.io/linuxserver/bazarr:latest
    container_name: bazarr
    environment: *common-env
    volumes:
      # Configuration files
      - /mnt/docker/config/bazarr:/config
      # Movie folder (must match Radarr's /movies)
      - /mnt/data/media/movies:/movies
      # TV Show folder (must match Sonarr's /tv)
      - /mnt/data/media/tvshow:/tv
    ports:
      # Web UI Port
      - "6767:6767"
    # Wait for dependencies to be ready before starting
    depends_on: [radarr, sonarr]
    restart: unless-stopped

  # -----------------------------------------------------------
  # 6. SMART HOME & NETWORK SERVICES
  # -----------------------------------------------------------
  homeassistant:
    image: lscr.io/linuxserver/homeassistant:latest
    container_name: homeassistant
    environment: *common-env
    volumes:
      # Configuration files
      - /mnt/docker/config/hassio/config:/config
    # Required to access local network devices (e.g., discovery, broadcasts)
    network_mode: host
    restart: unless-stopped

  airconnect:
    image: 1activegeek/airconnect:latest
    container_name: airconnect
    # Required for AirPlay/network protocols
    network_mode: host
    restart: unless-stopped

  cups:
    image: chuckcharlie/cups-avahi-airprint:latest
    container_name: cups
    environment:
      # Set up initial CUPS admin credentials
      CUPSADMIN: admin
      CUPSPASSWORD: admin
    volumes:
      # Service definitions (e.g., printers)
      - /mnt/docker/config/cups/service:/services
      # Configuration files
      - /mnt/docker/config/cups/config:/config
    # Required for Avahi/AirPrint discovery
    network_mode: host
    restart: unless-stopped